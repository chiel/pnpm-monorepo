on:
  workflow_call:
    inputs:
      publish_author_name:
        description: Name to use as author of publish commits
        required: true
        type: string
      publish_author_email:
        description: Email to use as author of publish commits
        required: true
        type: string
    secrets:
      kubeconfig:
        description: Kubeconfig
        required: true

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: node_modules
      - uses: actions/setup-node@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          run_install: true
          version: 7

  changed:
    name: Version changed packages
    runs-on: ubuntu-latest
    needs:
      - install
    outputs:
      matrices: ${{ steps.matrices.outputs.matrices }}
      packages: ${{ steps.packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: node_modules
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Get changed packages
        id: packages
        run: echo "::set-output name=packages ::$((node_modules/.bin/lerna changed --loglevel silent || true) | paste -sd, -)"
      - name: Get job matrices for changed packages
        uses: ./.github/actions/job-matrices
        id: matrices
        if: steps.packages.outputs.packages != null
        with:
          packages: ${{ steps.packages.outputs.packages }}
      - name: Version changed packages
        if: steps.packages.outputs.packages != null
        run: node_modules/.bin/lerna version --no-git-tag-version --no-push
      - name: Upload version artifacts
        if: steps.packages.outputs.packages != null
        uses: actions/upload-artifact@v3
        with:
          name: version-artifacts
          path: packages/*/package.json

  packages-build:
    name: Build changed packages
    runs-on: ubuntu-latest
    needs:
      - changed
      - install
    if: needs.changed.outputs.packages != null
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: node_modules
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/download-artifact@v3
        with:
          name: version-artifacts
          path: packages
      - name: Build changed packages
        run: node_modules/.bin/lerna run build --scope={,${{ needs.changed.outputs.packages }}} --include-dependencies
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: packages/*/dist

  docker-lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    needs:
      - changed
    if: |
      needs.changed.outputs.matrices != null &&
      fromJSON(needs.changed.outputs.matrices).docker-lint != null
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.matrices).docker-lint }}
    steps:
      - uses: actions/checkout@v3
      - name: Lint Dockerfiles
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: packages/${{ matrix.package }}/Dockerfile

  docker-build:
    name: Build containers
    runs-on: ubuntu-latest
    needs:
      - changed
      - docker-lint
      - packages-build
    if: |
      needs.changed.outputs.matrices != null &&
      fromJSON(needs.changed.outputs.matrices).docker-lint != null
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.matrices).docker-build }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version-artifacts
          path: packages
      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: packages
      - name: Determine version
        id: version
        run: |
          VERSION="v$(jq -r .version packages/${{ matrix.package }}/package.json)"
          echo "::set-output name=version ::$VERSION"
      - name: Log into GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.ref == 'refs/heads/master' }}
          tags: ghcr.io/${{ github.repository }}/${{ matrix.package }}:${{ steps.version.outputs.version }}
          context: packages/${{ matrix.package }}

  kubernetes-deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs:
      - changed
      - docker-build
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.changed.outputs.matrices != null &&
      fromJSON(needs.changed.outputs.matrices).kubernetes-deploy != null &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped')
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.matrices).kubernetes-deploy }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-kubectl@v2.1
      - uses: actions/download-artifact@v3
        with:
          name: version-artifacts
          path: packages
      - uses: actions/download-artifact@v3
        with:
          name: deploy-env
        continue-on-error: true
      - name: Generate kubernetes manifest
        run: |
          [[ -f deploy.env ]] && source deploy.env
          export RELEASE="v$(jq -r .version packages/${{ matrix.package }}/package.json)"
          envsubst < packages/${{ matrix.package }}/.k8s.template.yaml >> packages/${{ matrix.package }}/.k8s.yaml
      - name: Create .kubeconfig
        run: echo "${{ secrets.kubeconfig }}" > .kubeconfig
      - name: Apply kubernetes manifests
        run: kubectl --kubeconfig=.kubeconfig apply -f packages/${{ matrix.package }}/.k8s.yaml
